-- MySQL dump 10.13  Distrib 5.5.47, for Win32 (x86)
--
-- Host: localhost    Database: laravel5
-- ------------------------------------------------------
-- Server version	5.5.47

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `articles`
--

DROP TABLE IF EXISTS `articles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `articles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `user_id` tinyint(3) unsigned NOT NULL DEFAULT '1',
  `type_id` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `summary` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `body` text COLLATE utf8_unicode_ci,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articles`
--

LOCK TABLES `articles` WRITE;
/*!40000 ALTER TABLE `articles` DISABLE KEYS */;
INSERT INTO `articles` VALUES (15,'[译]Laravel 5.0 之 Eloquent 属性转换',1,0,'转换一个属性值的意思是把它转换成某个特定的数据类型（或者是为了确保它是某个特定的数据类型）','<p style=\"line-height: 1.5em;\">　　属性转换是 Eloquent 模型的一个功能特性，这个特性让我们可以赋予 Eloquent 模型中的某个属性转换为一个特定的数据类型。<br/>提示：在以前版本中也可以这样做，但是必须为每个属性定义一个自动赋值的方法。而在新版本中可以通过单一的数组配置让模型自动完成这些工作。</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;这意味着假如你的数据是以特定的格式存储在数据库中，而你在使用时需要的是另外一种格式，现在你可以配置 Eloquent 模型自动完成两种格式之间的转换工作。\n为什么要这样做？</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;最常见的应用场景可能是：当你存储数字的时候——它们默认是返回字符串，但 Eloquent 属性转换可以帮你把字符串转换为 integer, real, float 或者 double，当然还可以转换为 boolean.\n但这就是全部了吗？当然不是。\n它是如何实现的？</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;要应用属性转换这个功能，你需要在你的模型中添加一个 protected $casts 的数组变量。</p><pre class=\"brush:php;toolbar:false\">protected&nbsp;$casts&nbsp;=&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&#39;is_admin&#39;&nbsp;=&gt;&nbsp;&#39;boolean&#39;,\n];</pre><p>&nbsp;<br/></p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;如上面代码所示，数组中的每个元素以属性名为 key, 要转换的目标类型为 value. 这个数组变量 $casts 的作用就是告诉 Eloquent：“每次当我访问这个模型中的 is_admin 属性的时候，返回一个类型为 boolean 的值给我”。\n转换类型\ninteger(int)</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;这会把你指定的属性值转换为整形，通过 return (int) $value 来实现。\nfloat(real|double)\n　　Real, Float 和 Double 在 PHP 中是同一种类型。 PHP 的 (double) 和 (real) 类型转换都是 (float) 的别名。所以指定为这三种时，其实在代码中都是通过 return (float) $value 来实现的。\nstring\n　　这个很简单，就是把你指定的属性值转为字符串返回，用的是 return (string) $value.\nboolean(bool)</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;这是把你指定的属性值转换为布尔值返回，用 return (bool) $value 实现，这意味着你要把你的数据存储为 0 和 1.\nobject</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;对象和数组是最有意思的选项。都是用把序列化为 JSON 格式数组的数据转换（反序列化）并返回。如果指定为 object, 那么是用 return json_decode($value) 实现的，返回一个 stdClass 类型的对象。&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;array 这个值是把 JSON 化的数组转换为 PHP 数组，用 return json_decode($value, true) 实现。</p>','2016-05-18 04:26:57','2017-01-09 01:23:29'),(17,'Sublime Text快捷键列表（Shortcuts Cheatsheet）',1,0,'增强软件开发效率','<h3>通用（General）&nbsp;</h3><p>↑↓←→：上下左右移动光标，注意不是不是KJHL！</p><p>Alt：调出菜单&nbsp;</p><p>Ctrl + Shift + P：调出命令板（Command Palette）</p><p>Ctrl + `：调出控制台\r\n编辑（Editing）</p><p>Ctrl + Enter：在当前行下面新增一行然后跳至该行</p><p>Ctrl + Shift + Enter：在当前行上面增加一行并跳至该行</p><p>Ctrl + ←/→：进行逐词移动&nbsp;</p><p>Ctrl + Shift + ←/→进行逐词选择&nbsp;</p><p>Ctrl + ↑/↓移动当前显示区域&nbsp;</p><p>Ctrl + Shift + ↑/↓移动当前行\r\n选择（Selecting）&nbsp;</p><p>Ctrl + D：选择当前光标所在的词并高亮该词所有出现的位置</p><p>再次Ctrl + D选择该词出现的下一个位置</p><p>在多重选词的过程中，使用Ctrl + K进行跳过，使用Ctrl + U进行回退，使用Esc退出多重编辑&nbsp;</p><p>Ctrl + Shift + L：将当前选中区域打散&nbsp;</p><p>Ctrl + J：把当前选中区域合并为一行&nbsp;</p><p>Ctrl + M：在起始括号和结尾括号间切换&nbsp;</p><p>Ctrl + Shift + M：快速选择括号间的内容&nbsp;</p><p>Ctrl + Shift + J：快速选择同缩进的内容&nbsp;</p><p>Ctrl + Shift + Space：快速选择当前作用域（Scope）的内容\r\n查找&amp;替换（Finding&amp;Replacing）&nbsp;</p><p>F3：跳至当前关键字下一个位置&nbsp;</p><p>Shift + F3：跳到当前关键字上一个位置&nbsp;</p><p>Alt + F3：选中当前关键字出现的所有位置&nbsp;</p><p>Ctrl + F/H：进行标准查找/替换 &nbsp; &nbsp;</p><p>Alt + C：切换大小写敏感（Case-sensitive）模式&nbsp;</p><p>Alt + W：切换整字匹配（Whole matching）模式</p><p>Alt + R：切换正则匹配（Regex matching）模式</p><p>Ctrl + Shift + H：替换当前关键字</p><p>Ctrl + Alt + Enter：替换所有关键字匹配&nbsp;</p><p>Ctrl + Shift + F：多文件搜索&amp;替换\r\n跳转（Jumping）</p><p>Ctrl + P：跳转到指定文件，输入文件名后可以：@ 符号跳转：输入@symbol跳转到symbol符号所在的位置# 关键字跳转：输入#keyword跳转到keyword所在的位置: 行号跳转：输入:12跳转到文件的第12行。&nbsp;</p><p>Ctrl + R：跳转到指定符号&nbsp;</p><p>Ctrl + G：跳转到指定行号\r\n窗口（Window）&nbsp;</p><p>Ctrl + Shift + N：创建一个新窗口&nbsp;</p><p>Ctrl + N：在当前窗口创建一个新标签&nbsp;</p><p>Ctrl + W：关闭当前标签，当窗口内没有标签时会关闭该窗口&nbsp;</p><p>Ctrl + Shift + T：恢复刚刚关闭的标签\r\n屏幕（Screen）&nbsp;</p><p>F11：切换普通全屏&nbsp;</p><p>Shift + F11：切换无干扰全屏&nbsp;</p><p>Alt + Shift + 2：进行左右分屏&nbsp;</p><p>Alt + Shift + 8：进行上下分屏&nbsp;</p><p>Alt + Shift + 5：进行上下左右分屏,分屏之后，使用Ctrl + 数字键跳转到指定屏，使用Ctrl + Shift + 数字键将当前屏移动到指定屏\r\n文／Vaayne（简书作者）\r\n原文链接：http://www.jianshu.com/p/7caef1ed96e8\r\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>','2016-05-18 04:40:12','2016-07-26 04:33:58'),(19,'mysql的外键约束',1,0,'MySQL有两种常用的引擎类型：MyISAM和InnoDB。目前只有InnoDB引擎类型支持外键约束。','<pre class=\"brush:sql;toolbar:false\">[CONSTRAINT&nbsp;[symbol]]&nbsp;FOREIGN&nbsp;KEY\r\n&nbsp;&nbsp;&nbsp;&nbsp;[index_name]&nbsp;(index_col_name,&nbsp;...)\r\n&nbsp;&nbsp;&nbsp;&nbsp;REFERENCES&nbsp;tbl_name&nbsp;(index_col_name,...)\r\n&nbsp;&nbsp;&nbsp;&nbsp;[ON&nbsp;DELETE&nbsp;reference_option]\r\n&nbsp;&nbsp;&nbsp;&nbsp;[ON&nbsp;UPDATE&nbsp;reference_option]\r\nreference_option:\r\n&nbsp;&nbsp;&nbsp;&nbsp;RESTRICT&nbsp;|&nbsp;CASCADE&nbsp;|&nbsp;SET&nbsp;NULL&nbsp;|&nbsp;NO&nbsp;ACTION</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;外键的使用需要满足下列的条件：</p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"line-height: 1.5em;\">两张表必须都是InnoDB表，并且它们没有临时表。\r\n &nbsp;</p></li><li><p style=\"line-height: 1.5em;\">建立外键关系的对应列必须具有相似的InnoDB内部数据类型。\r\n &nbsp;</p></li><li><p style=\"line-height: 1.5em;\">建立外键关系的对应列必须建立了索引。\r\n &nbsp;</p></li><li><p style=\"line-height: 1.5em;\">假如显式的给出了CONSTRAINT symbol，那symbol在数据库中必须是唯一的。假如没有显式的给出，InnoDB会自动的创建。\r\n选项说明 4.1. CASCADE: 从父表中删除或更新对应的行，同时自动的删除或更新自表中匹配的行。ON DELETE CANSCADE和ON UPDATE CANSCADE都被InnoDB所支持。\r\n &nbsp;</p><p style=\"line-height: 1.5em;\">4.2. SET NULL: 从父表中删除或更新对应的行，同时将子表中的外键列设为空。注意，这些在外键列没有被设为NOT NULL时才有效。ON DELETE SET NULL和ON UPDATE SET SET NULL都被InnoDB所支持。\r\n &nbsp;</p><p style=\"line-height: 1.5em;\">4.3. NO ACTION: InnoDB拒绝删除或者更新父表。</p><p style=\"line-height: 1.5em;\">4.4. RESTRICT: 拒绝删除或者更新父表。指定RESTRICT（或者NO ACTION）和忽略ON DELETE或者ON UPDATE选项的效果是一样的。\r\n 4.5. SET DEFAULT: InnoDB目前不支持。\r\n添加外键例子：\r\nALTER TABLE tbl_name\r\n &nbsp; &nbsp;ADD [CONSTRAINT [symbol]] FOREIGN KEY\r\n &nbsp; &nbsp;[index_name] (index_col_name, ...)\r\n &nbsp; &nbsp;REFERENCES tbl_name (index_col_name,...)\r\n &nbsp; &nbsp;[ON DELETE reference_option]\r\n &nbsp; &nbsp;[ON UPDATE reference_option]\r\n删除外键例子：\r\nALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;</p></li></ol>','2016-05-20 03:51:34','2016-07-26 04:36:13'),(20,'12 个非常有用的 JavaScript 技巧',1,0,'在这篇文章中将给大家分享12个有关于JavaScript的小技巧。这些小技巧可能在你的实际工作中或许能帮助你解决一些问题。','<p>1、使用!!操作符转换布尔值\r\n	对变量查检是否存在或检查值是否为有效值，若存在就返回true。对于变量可以使用!!variable做检测，只要变量值为:0、null、\\&quot; \\&quot;、undefined或NaN都返回false，反之返回true。比如：&nbsp;</p><pre class=\"brush:js;toolbar:false\">function&nbsp;Account(cash)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.cash&nbsp;=&nbsp;cash;\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.hasMoney&nbsp;=&nbsp;!!cash;\r\n}\r\nvar&nbsp;account&nbsp;=&nbsp;new&nbsp;Account(100.50);\r\nconsole.log(account.cash);&nbsp;//&nbsp;100.50\r\nconsole.log(account.hasMoney);&nbsp;//&nbsp;true\r\nvar&nbsp;emptyAccount&nbsp;=&nbsp;new&nbsp;Account(0);\r\nconsole.log(emptyAccount.cash);&nbsp;//&nbsp;0\r\nconsole.log(emptyAccount.hasMoney);&nbsp;//&nbsp;false\r\n在示例中，只要account.cash的值大于0，那么account.hasMoney返回true。</pre><p>&nbsp;<br/></p><p>2、使用+将字符串转换成数字\r\n	‘+’可以将字符串数据转换成数字，不过其只适合用于字符串，否则将返回NaN，比如：</p><pre class=\"brush:js;toolbar:false\">function&nbsp;toNumber(strNumber)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;+strNumber;\r\n}\r\nconsole.log(toNumber(\\&quot;12\\&quot;));&nbsp;//&nbsp;12\r\nconsole.log(toNumber(\\&quot;AC\\&quot;));&nbsp;//&nbsp;NaN\r\n这也适用于Date，在本例中，它将返回的是时间戳：\r\nconsole.log(+new&nbsp;Date())&nbsp;//&nbsp;1461288164385</pre><p>3、并条件符\r\n	如果一段这样的代码：\r\nif (conected) {login();\r\n}\r\n	可将变量简写，并使用&amp;&amp;和函数连接在一起，比如上面的示例，可以简写成这样：\r\nconected &amp;&amp; login();\r\n	如果一些属性或函数存在于对象中，也可以这样做检测，如下所示：\r\nuser &amp;&amp; user.login();&nbsp;</p><p>4、使用||运算符\r\n	在ES6中有默认参数这一特性。为了在老的浏览器中模拟这一特性，可以使用||操作符，并且将默认值当做第二个参数传入。若第一个参数返回false，那么第二个值将会认为是一个默认值。如下：&nbsp;</p><pre class=\"brush:js;toolbar:false\">function&nbsp;User(name,&nbsp;age)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name&nbsp;||&nbsp;\\&quot;Oliver&nbsp;Queen\\&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;age&nbsp;||&nbsp;27;\r\n}\r\nvar&nbsp;user1&nbsp;=&nbsp;new&nbsp;User();\r\nconsole.log(user1.name);&nbsp;//&nbsp;Oliver&nbsp;Queen\r\nconsole.log(user1.age);&nbsp;//&nbsp;27\r\nvar&nbsp;user2&nbsp;=&nbsp;new&nbsp;User(\\&quot;Barry&nbsp;Allen\\&quot;,&nbsp;25);\r\nconsole.log(user2.name);&nbsp;//&nbsp;Barry&nbsp;Allen\r\nconsole.log(user2.age);&nbsp;//&nbsp;25</pre><p>5、在循环中缓存array.length\r\n	这个在处理一个很大的数组循环时，对性能影响将是非常大的。基本上，大家都会写一个这样的同步迭代的数组：&nbsp;</p><pre class=\"brush:js;toolbar:false\">for(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;array.length;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(array[i]);\r\n}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;如果是小型数组，这样做很好，若要处理大的数组，这段代码在每次迭代都将会重新计算数组大小，这将会导致延误。为了避免这种现象出现，可以将array.length做一个缓存：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;length&nbsp;=&nbsp;array.length;\r\nfor(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(array[i]);\r\n}\r\n也可以写在这样：\r\nfor(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;length&nbsp;=&nbsp;array.length;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(array[i]);\r\n}</pre><p>6、检测对象中属性\r\n	检测一些属性是否存在，避免运行未定义的函数或属性时，这个技巧就很有用。若打算写跨兼容浏览器的代码，可能会用到这个小技巧。例如，使用document.querySelector()来选择一个id，并且让它兼容IE6浏览器，但在IE6中这函数是不存在的，那么使用这个操作符来检测函数是否存在就非常有用，如下：&nbsp;</p><pre class=\"brush:js;toolbar:false\">if&nbsp;(\\&#39;querySelector\\&#39;&nbsp;in&nbsp;document)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector(\\&quot;#id\\&quot;);\r\n}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(\\&quot;id\\&quot;);\r\n}</pre><p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在示例中，如果document不存在querySelector函数，那么就调用docuemnt.getElementById(\\&quot;id\\&quot;)。&nbsp;<br/></p><p>7、获取数组中最后一个元素\r\n	Array.prototype.slice(begin,end)用来获取begin和end之间的元素。若不设置end参数，将会把数组长度值当作end值。其实这个函数还可以接受负值作为参数。若设置一个负值作为begin的值，那么可以获取数组的最后一个元素。如：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;array&nbsp;=&nbsp;[1,2,3,4,5,6];\r\nconsole.log(array.slice(-1));&nbsp;//&nbsp;[6]\r\nconsole.log(array.slice(-2));&nbsp;//&nbsp;[5,6]\r\nconsole.log(array.slice(-3));&nbsp;//&nbsp;[4,5,6]</pre><p>8、数组截断\r\n	这个技巧用来锁定数组的大小，若用于删除数组中的一些元素，是非常有用的。例如，数组有10个元素，但只要前五个元素，那么通过array.length=5来截断数组。如下：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;array&nbsp;=&nbsp;[1,2,3,4,5,6];\r\nconsole.log(array.length);&nbsp;//&nbsp;6\r\narray.length&nbsp;=&nbsp;3;\r\nconsole.log(array.length);&nbsp;//&nbsp;3\r\nconsole.log(array);&nbsp;//&nbsp;[1,2,3]</pre><p>9、替换所有\r\n	String.replace()函数允许使用字符串或正则表达式替换字符串，默认函数只替换第一次出现的字符串，但使用正则表达式中的/g来模拟replaceAll()函数功能：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;string&nbsp;=&nbsp;\\&quot;john&nbsp;john\\&quot;;\r\nconsole.log(string.replace(/hn/,&nbsp;\\&quot;ana\\&quot;));&nbsp;//&nbsp;\\&quot;joana&nbsp;john\\&quot;\r\nconsole.log(string.replace(/hn/g,&nbsp;\\&quot;ana\\&quot;));&nbsp;//&nbsp;\\&quot;joana&nbsp;joana\\&quot;</pre><p>10、合并数组\r\n	若要合并两个数组，一般都会用Array.concat()函数：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;array1&nbsp;=&nbsp;[1,2,3];\r\nvar&nbsp;array2&nbsp;=&nbsp;[4,5,6];\r\nconsole.log(array1.concat(array2));&nbsp;//&nbsp;[1,2,3,4,5,6];</pre><p>&nbsp;	<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;但这函数不适合用来合并两个大型数组，因为将消耗大量内存来存储新创建的数组。因此，可以使用Array.push().apply(arr1,arr2)来替代创建一个新数组。这种方法不创建新数组，只是将第一个第二个数组合并在一起，同时减少内存使用：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;array1&nbsp;=&nbsp;[1,2,3];\r\nvar&nbsp;array2&nbsp;=&nbsp;[4,5,6];\r\nconsole.log(array1.push.apply(array1,&nbsp;array2));&nbsp;//&nbsp;[1,2,3,4,5,6];</pre><p>11、将NodeList转换成数组\r\n	运行document.querySelectorAll(“p”)时，可能返回DOM元素的数组，也就是NodeList对象。但这个对象不具有数组的函数功能，比如sort()、reduce()、map()、filter()等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用 Array.from(elements)来实现：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;elements&nbsp;=&nbsp;document.querySelectorAll(\\&quot;p\\&quot;);&nbsp;//&nbsp;NodeList\r\nvar&nbsp;arrayElements&nbsp;=&nbsp;Array.from(elements);&nbsp;//&nbsp;This&nbsp;is&nbsp;another&nbsp;way&nbsp;of&nbsp;converting&nbsp;NodeList&nbsp;to&nbsp;Array</pre><p>12、数组元素的洗牌\r\n	对于数组元素的洗牌，不需要任何外部的库，比如Lodash，只要这样做：&nbsp;</p><pre class=\"brush:js;toolbar:false\">var&nbsp;list&nbsp;=&nbsp;[1,2,3];\r\nconsole.log(list.sort(function()&nbsp;{&nbsp;Math.random()&nbsp;-&nbsp;0.5&nbsp;}));&nbsp;//&nbsp;[2,1,3]</pre><p>作者： Caio Ribeiro Pereira；译者： 大漠<br/></p>','2016-05-21 00:10:12','2016-07-26 04:42:54'),(21,'理解事务—原子性、一致性、隔离性和持久性',1,0,'事务是指对系统进行的一组操作，为了保证系统的完整性，事务需要具有ACID特性','<ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><h3 style=\"line-height: 1.5em;\">原子性（Atomic）</h3></li></ol><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;一个事务包含多个操作，这些操作要么全部执行，要么全都不执行。实现事务的原子性，要支持回滚操作，在某个操作失败后，回滚到事务执行之前的状态。</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;回滚实际上是一个比较高层抽象的概念，大多数DB在实现事务时，是在事务操作的数据快照上进行的（比如，MVCC），并不修改实际的数据，如果有错并不会提交，所以很自然的支持回滚。</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;而在其他支持简单事务的系统中，不会在快照上更新，而直接操作实际数据。可以先预演一边所有要执行的操作，如果失败则这些操作不会被执行，通过这种方式很简单的实现了原子性。&nbsp;</p><h3 style=\"line-height: 1.5em;\">2. 一致性（Consistency）</h3><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;一致性是指事务使得系统从一个一致的状态转换到另一个一致状态。事务的一致性决定了一个系统设计和实现的复杂度。事务可以不同程度的一致性：</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;强一致性：读操作可以立即读到提交的更新操作。</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;弱一致性：提交的更新操作，不一定立即会被读操作读到，此种情况会存在一个不一致窗口，指的是读操作可以读到最新值的一段时间。</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;最终一致性：是弱一致性的特例。事务更新一份数据，最终一致性保证在没有其他事务更新同样的值的话，最终所有的事务都会读到之前事务更新的最新值。如果没有错误发生，不一致窗口的大小依赖于：通信延迟，系统负载等。其他一致性变体还有：</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;单调一致性：如果一个进程已经读到一个值，那么后续不会读到更早的值。</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;会话一致性：保证客户端和服务器交互的会话过程中，读操作可以读到更新操作后的最新值。&nbsp;</p><h3 style=\"line-height: 1.5em;\">3. 隔离性（Isolation）</h3><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;并发事务之间互相影响的程度，比如一个事务会不会读取到另一个未提交的事务修改的数据。在事务并发操作时，可能出现的问题有：</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;脏读：事务A修改了一个数据，但未提交，事务B读到了事务A未提交的更新结果，如果事务A提交失败，事务B读到的就是脏数据。\r\n &nbsp; &nbsp; 不可重复读：在同一个事务中，对于同一份数据读取到的结果不一致。比如，事务B在事务A提交前读到的结果，和提交后读到的结果可能不同。不可重复读出现的原因就是事务并发修改记录，要避免这种情况，最简单的方法就是对要修改的记录加锁，这回导致锁竞争加剧，影响性能。另一种方法是通过MVCC可以在无锁的情况下，避免不可重复读。\r\n &nbsp; &nbsp; 幻读：在同一个事务中，同一个查询多次返回的结果不一致。事务A新增了一条记录，事务B在事务A提交前后各执行了一次查询操作，发现后一次比前一次多了一条记录。幻读是由于并发事务增加记录导致的，这个不能像不可重复读通过记录加锁解决，因为对于新增的记录根本无法加锁。需要将事务串行化，才能避免幻读。\r\n &nbsp; &nbsp; 事务的隔离级别从低到高有：</p><p style=\"line-height: 1.5em;\">Read Uncommitted：最低的隔离级别，什么都不需要做，一个事务可以读到另一个事务未提交的结果。所有的并发事务问题都会发生</p><p style=\"line-height: 1.5em;\">Read Committed：只有在事务提交后，其更新结果才会被其他事务看见。可以解决脏读问题。</p><p style=\"line-height: 1.5em;\">Repeated Read：在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以解决脏读、不可重复读。</p><p style=\"line-height: 1.5em;\">Serialization：事务串行化执行，隔离级别最高，牺牲了系统的并发性。可以解决并发事务的所有问题。\r\n &nbsp; &nbsp; 通常，在工程实践中，为了性能的考虑会对隔离性进行折中。&nbsp;</p><h3 style=\"line-height: 1.5em;\">4. 持久性（Durability）</h3><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;事务提交后，对系统的影响是永久的。</p>','2016-05-23 20:19:31','2016-07-26 04:51:27'),(22,'prototype 属性（对象）(JavaScript)',1,0,'为对象的类返回原型的引用。','<p>语法\r\nobjectName.prototype&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;备注\r\nobjectName 参数是对象的名称。\r\n	用 prototype 属性为对象的类提供一组基本功能。&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对象的新的实例“继承”了赋予该对象的原型的行为。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;例如，若要将方法添加到返回数组的最大元素的值的 Array 对象，请声明函数、将它添加到 Array.prototype 并使用它。</p><pre class=\"brush:js;toolbar:false\">JavaScript&nbsp;\r\nfunction&nbsp;array_max(&nbsp;){\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i,&nbsp;max&nbsp;=&nbsp;this[0];\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;this.length;&nbsp;i++)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(max&nbsp;&lt;&nbsp;this[i])\r\n&nbsp;&nbsp;&nbsp;&nbsp;max&nbsp;=&nbsp;this[i];\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;max;\r\n}\r\nArray.prototype.max&nbsp;=&nbsp;array_max;\r\nvar&nbsp;myArray&nbsp;=&nbsp;new&nbsp;Array(7,&nbsp;1,&nbsp;3,&nbsp;11,&nbsp;25,&nbsp;9\r\n);\r\ndocument.write(myArray.max());\r\n\r\n//&nbsp;Output:\r\n//&nbsp;25</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;所有内部 JavaScript 对象都有一个只读的 prototype 属性。&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;可将属性和方法添加到原型中，但不能为对象分配其他原型。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;但是，可以向用户定义的对象分配新的原型。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;本语言参考中，每个内部对象的方法和属性列表都指示了哪些是对象原型的一部分，哪些不是。\r\n要求\r\n	在以下文档模式中受支持：Quirks、Internet Explorer 6 标准模式、Internet Explorer 7 标准模式、Internet Explorer 8 标准模式、Internet Explorer 9 标准模式、Internet Explorer 10 标准模式和 Internet Explorer 11 标准模式。此外，也在应用商店应用（Windows 8 和 Windows Phone 8.1）中受支持。</p>','2016-05-23 20:41:52','2016-07-26 04:54:48'),(23,'__proto__ 属性 (Object) (JavaScript)',1,0,'包含对指定对象的内部原型的引用。','<p>语法&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;object.__proto__\n参数\nobject\n必需。要对其设置原型的对象。&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;备注\n__proto__ 属性可用于设置对象的原型。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;该对象或函数继承新原型的所有方法和属性，以及新原型的原型链中的所有方法和属性。对象可以仅有一个原型（不包括原型链中继承的原型），因此当您调用 __proto__ 属性时，将替换以前的原型。\n	您只能在可扩展对象上设置原型。有关更多信息，请参见 <a href=\"https://msdn.microsoft.com/zh-cn/library/ff806191(v=vs.94).aspx\" target=\"_self\">Object.preventExtensions 函数 (JavaScript)</a>。&nbsp;</p><p><span style=\"color: rgb(255, 0, 0);\"><strong>注意:</strong></span></p><p>__proto__ 属性名称以两个下划线开始和结束。&nbsp;</p><p>下面的代码示例显示如何为对象设置原型。</p><pre class=\"brush:js;toolbar:false\">function&nbsp;Rectangle()&nbsp;{\n}\nvar&nbsp;rec&nbsp;=&nbsp;new&nbsp;Rectangle();\nif&nbsp;(console&nbsp;&amp;&amp;&nbsp;console.log)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(rec.__proto__&nbsp;===&nbsp;Rectangle.prototype);&nbsp;&nbsp;//&nbsp;Returns&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;rec.__proto__&nbsp;=&nbsp;Object.prototype;\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(rec.__proto__&nbsp;===&nbsp;Rectangle.prototype);&nbsp;&nbsp;//&nbsp;Returns&nbsp;false\n}</pre><p>下面的代码示例演示如何通过将属性添加到原型来将其添加到对象中。&nbsp;</p><pre class=\"brush:js;toolbar:false\">JavaScript\nvar&nbsp;proto&nbsp;=&nbsp;{&nbsp;y:&nbsp;2&nbsp;};\nvar&nbsp;obj&nbsp;=&nbsp;{&nbsp;x:&nbsp;10&nbsp;};\nobj.__proto__&nbsp;=&nbsp;proto;\nproto.y&nbsp;=&nbsp;20;\nproto.z&nbsp;=&nbsp;40;\nif&nbsp;(console&nbsp;&amp;&amp;&nbsp;console.log)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(obj.x&nbsp;===&nbsp;10);&nbsp;&nbsp;//&nbsp;Returns&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(obj.y&nbsp;===&nbsp;20);&nbsp;&nbsp;//&nbsp;Returns&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(obj.z&nbsp;===&nbsp;40);&nbsp;&nbsp;//&nbsp;Returns&nbsp;true\n}</pre><p>下面的代码示例通过在 String 对象上设置新原型将特性添加到该对象。&nbsp;</p><pre class=\"brush:js;toolbar:false\">JavaScript\nvar&nbsp;stringProp&nbsp;=&nbsp;{&nbsp;desc:&nbsp;&quot;description&quot;&nbsp;};\nString.__proto__&nbsp;=&nbsp;stringProp;\nvar&nbsp;s1&nbsp;=&nbsp;&quot;333&quot;;\nvar&nbsp;s2&nbsp;=&nbsp;new&nbsp;String(&quot;333&quot;);\nif&nbsp;(console&nbsp;&amp;&amp;&nbsp;console.log)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(String.desc&nbsp;===&nbsp;&quot;description&quot;);&nbsp;//&nbsp;Returns&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(s1.desc&nbsp;===&nbsp;&quot;description&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Returns&nbsp;false\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(s2.desc&nbsp;===&nbsp;&quot;description&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Returns&nbsp;false\n&nbsp;&nbsp;&nbsp;&nbsp;s1.__proto__&nbsp;=&nbsp;String;&nbsp;&nbsp;//&nbsp;Can&#39;t&nbsp;be&nbsp;set.\n&nbsp;&nbsp;&nbsp;&nbsp;s2.__proto__&nbsp;=&nbsp;String;\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(s1.desc&nbsp;===&nbsp;&quot;description&quot;);&nbsp;//&nbsp;Returns&nbsp;false\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(s2.desc&nbsp;===&nbsp;&quot;description&quot;);&nbsp;//&nbsp;Returns&nbsp;true\n}</pre><p><br/></p>','2016-05-23 20:43:28','2017-01-09 01:06:29'),(24,'原码, 反码, 补码 详解（一）',1,0,'本篇文章讲解了计算机的原码, 反码和补码','<h3 style=\"line-height: 1.5em;\">一. 机器数和真值</h3><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;1、机器数\r\n	一个数在计算机中的二进制表示形式, &nbsp;叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.\r\n	比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。\r\n	那么，这里的 00000011 和 10000011 就是机器数。&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;2、真值\r\n	因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。\r\n例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1&nbsp;</p><h3 style=\"line-height: 1.5em;\">二. 原码, 反码</h3><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;补码的基础概念和计算方法.\r\n	在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;1. 原码\r\n	原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:\r\n[+1]原 = 0000 0001\r\n[-1]原 = 1000 0001\r\n第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:\r\n[1111 1111 , 0111 1111]\r\n即\r\n[-127 , 127]\r\n原码是人脑最容易理解和计算的表示方式.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;2. 反码\r\n反码的表示方法是:\r\n正数的反码是其本身\r\n负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.\r\n[+1] = [00000001]原 = [00000001]反\r\n[-1] = [10000001]原 = [11111110]反\r\n	可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;3. 补码\r\n补码的表示方法是:\r\n正数的补码就是其本身\r\n负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)\r\n[+1] = [00000001]原 = [00000001]反 = [00000001]补\r\n[-1] = [10000001]原 = [11111110]反 = [11111111]补\r\n	对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.&nbsp;</p><h3 style=\"line-height: 1.5em;\">三. 为何要使用原码,反码和补码</h3><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;在开始深入学习前, 我的学习建议是先&quot;死记硬背&quot;上面的原码, 反码和补码的表示方式以及计算方法.\r\n	现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:&nbsp;</p><p style=\"text-align: center; line-height: 1.5em;\"><span style=\"font-size: 14px;\">[+1] = [00000001]原 = [00000001]反 = [00000001]补</span></p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;所以不需要过多解释. 但是对于负数:</p><p style=\"text-align: center; line-height: 1.5em;\"><span style=\"font-size: 14px;\">[-1] = [10000001]原 = [11111110]反 = [11111111]补&nbsp;</span></p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?&nbsp;	</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别&quot;符号位&quot;显然会让计算机的基础电路设计变得十分复杂!&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即:&nbsp;</p><p style=\"text-align: center; line-height: 1.5em;\">1-1 = 1 + (-1) = 0&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了. 于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:\r\n计算十进制的表达式:&nbsp;</p><p style=\"text-align: center; line-height: 1.5em;\"><span style=\"font-size: 14px;\">1-1=0\r\n1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2&nbsp;	</span></p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.\r\n	为了解决原码做减法的问题, 出现了反码。算十进制的表达式:&nbsp;</p><p style=\"text-align: right; line-height: 1.5em;\"><span style=\"font-size: 14px;\">1-1=0\r\n	1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</span>&nbsp;	</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在&quot;0&quot;这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.&nbsp;	</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;于是补码的出现, 解决了0的符号以及两个编码的问题:&nbsp;</p><p style=\"text-align: center; line-height: 1.5em;\"><span style=\"font-size: 14px;\">1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</span></p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:&nbsp;</p><p style=\"text-align: center; line-height: 1.5em;\"><span style=\"font-size: 14px;\">(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补&nbsp;	</span></p><p style=\"text-align: left; line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]补 就是-128. 但是注意因为实际上是使用以前的-0的补码示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原, 这是不正确的)&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].\r\n	因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.</p>','2016-05-23 20:52:36','2016-07-26 05:06:46'),(25,'原码, 反码, 补码 详解（二）',1,0,'论证了为何可以用反码, 补码的加法计算原码的减法','<h3 style=\"line-height: 1.5em;\">四 原码, 反码, 补码&nbsp;</h3><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;再深入\r\n	计算机巧妙地把符号位参与运算, 并且将减法变成了加法, 背后蕴含了怎样的数学原理呢?\r\n	将钟表想象成是一个1位的12进制数. 如果当前时间是6点, 我希望将时间设置成4点, 需要怎么做呢?我们可以:&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;1. 往回拨2个小时: 6 - 2 = 4\r\n2. 往前拨10个小时: (6 + 10) mod 12 = 4\r\n3. 往前拨10+12=22个小时: (6+22) mod 12 =4\r\n	2,3方法中的mod是指取模操作, 16 mod 12 =4 即用16除以12后的余数是4.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;所以钟表往回拨(减法)的结果可以用往前拨(加法)替代!\r\n	现在的焦点就落在了如何用一个正数, 来替代一个负数. 上面的例子我们能感觉出来一些端倪, 发现一些规律. 但是数学是严谨的. 不能靠感觉.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;首先介绍一个数学中相关的概念: 同余\r\n同余的概念\r\n	两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余\r\n记作 a ≡ b (mod m)\r\n读作 a 与 b 关于模 m 同余。\r\n举例说明:\r\n4 mod 12 = 4\r\n16 mod 12 = 4\r\n28 mod 12 = 4\r\n所以4, 16, 28关于模 12 同余.\r\n负数取模\r\n正数进行mod运算是很简单的. 但是负数呢?\r\n下面是关于mod运算的数学定义:&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color: rgb(149, 179, 215);\">clip_image001\r\n	 &quot;取下界&quot;符号找不到如何输入(word中粘贴过来后乱码). 下面是使用&quot;L&quot;和&quot;J&quot;替换上图的&quot;取下界&quot;符号:\r\nx mod y = x - y L x / y J\r\n上面公式的意思是:\r\nx mod y等于 x 减去 y 乘上 x与y的商的下界.</span>&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;以 -3 mod 2 举例:\r\n-3 mod 2\r\n= -3 - 2xL -3/2 J\r\n= -3 - 2xL-1.5J\r\n= -3 - 2x(-2)\r\n= -3 + 4 = 1\r\n所以:\r\n(-2) mod 12 = 12-2=10\r\n(-4) mod 12 = 12-4 = 8\r\n(-5) mod 12 = 12 - 5 = 7&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;开始证明\r\n再回到时钟的问题上:\r\n回拨2小时 = 前拨10小时\r\n回拨4小时 = 前拨8小时\r\n回拨5小时= 前拨7小时\r\n注意, 这里发现的规律!\r\n结合上面学到的同余的概念.实际上:\r\n(-2) mod 12 = 10\r\n10 mod 12 = 10\r\n-2与10是同余的.\r\n(-4) mod 12 = 8\r\n8 mod 12 = 8\r\n-4与8是同余的.\r\n	距离成功越来越近了.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;要实现用正数替代负数, 只需要运用同余数的两个定理:&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;反身性:\r\na ≡ a (mod m)\r\n这个定理是很显而易见的.&nbsp;</p><p style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;线性运算定理:\r\n如果a ≡ b (mod m)，c ≡ d (mod m) 那么:\r\n(1)a ± c ≡ b ± d (mod m)\r\n(2)a * c ≡ b * d (mod m)\r\n	如果想看这个定理的证明, 请看:<a href=\"http://baike.baidu.com/view/79282.htm\" target=\"_self\">http://baike.baidu.com/view/79282.htm</a>&nbsp;<span style=\"line-height: 1.5em;\">所以:&nbsp;</span></p><p style=\"line-height: 1.5em; text-align: center;\"><span style=\"line-height: 1.5em; background-color: rgb(149, 179, 215);\">7 ≡ 7 (mod 12)\r\n(-2) ≡ 10 (mod 12)\r\n7 -2 ≡ 7 + 10 (mod 12)</span><span style=\"line-height: 1.5em;\">&nbsp;</span></p><p style=\"line-height: 1.5em;\"><span style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们为一个负数, 找到了它的正数同余数. 但是并不是7-2 = 7+10, 而是 7 -2 ≡ 7 + 10 (mod 12) , 即计算结果的余数相等.\r\n	接下来回到二进制的问题上, 看一下:</span><span style=\"line-height: 1.5em;\">2-1=1的问题.&nbsp;</span></p><p style=\"line-height: 1.5em; text-align: center;\"><span style=\"line-height: 1.5em; background-color: rgb(149, 179, 215);\">2-1=2+(-1) = [0000 0010]原 + [1000 0001]原= [0000 0010]反 + [1111 1110]反&nbsp;</span></p><p style=\"line-height: 1.5em;\"><span style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;先到这一步, -1的反码表示是1111 1110. 如果这里将[1111 1110]认为是原码, 则[1111 1110]原 = -126, 这里将符号位除去, 即认为是126.\r\n发现有如下规律:&nbsp;</span></p><p style=\"line-height: 1.5em; text-align: center;\"><span style=\"line-height: 1.5em; background-color: rgb(149, 179, 215);\">(-1) mod 127 = 126\r\n126 mod 127 = 126&nbsp;</span></p><p style=\"line-height: 1.5em;\"><span style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;即:\r\n(-1) ≡ 126 (mod 127)\r\n2-1 ≡ 2+126 (mod 127)\r\n2-1 与 2+126的余数结果是相同的! 而这个余数, 正式我们的期望的计算结果: 2-1=1\r\n	所以说一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大值! 这就和钟表一样, 转了一圈后总能找到在可表示范围内的一个正确的数值!\r\n	而2+126很显然相当于钟表转过了一轮, 而因为符号位是参与计算的, 正好和溢出的最高位形成正确的运算结果.</span></p><p style=\"line-height: 1.5em;\"><span style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;既然反码可以将减法变成加法, 那么现在计算机使用的补码呢? 为什么在反码的基础上加1, 还能得到正确的结果?&nbsp;</span></p><p style=\"line-height: 1.5em; text-align: center;\"><span style=\"line-height: 1.5em; background-color: rgb(149, 179, 215);\">2-1=2+(-1) = [0000 0010]原 + [1000 0001]原 = [0000 0010]补 + [1111 1111]补</span></p><p style=\"line-height: 1.5em;\"><span style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;如果把[1111 1111]当成原码, 去除符号位, 则:\r\n[0111 1111]原 = 127\r\n其实, 在反码的基础上+1, 只是相当于增加了膜的值:&nbsp;</span></p><p style=\"line-height: 1.5em; text-align: center;\"><span style=\"line-height: 1.5em; background-color: rgb(149, 179, 215);\">(-1) mod 128 = 127\r\n127 mod 128 = 127\r\n2-1 ≡ 2+127 (mod 128)</span><span style=\"line-height: 1.5em;\">&nbsp;	</span></p><p style=\"line-height: 1.5em;\"><span style=\"line-height: 1.5em;\">&nbsp;&nbsp;&nbsp;&nbsp;此时, 表盘相当于每128个刻度转一轮. 所以用补码表示的运算结果最小值和最大值应该是[-128, 128].\r\n	但是由于0的特殊情况, 没有办法表示128, 所以补码的取值范围是[-128, 127]</span></p>','2016-05-23 20:56:40','2016-07-26 05:12:29'),(27,'react事件系统',1,0,'react事件系统','<h2 id=\"bda4aed3a1b4993a8cd8b2b5a4ba7c93\" style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.225; color: rgb(51, 51, 51); margin: 5px 0px; font-size: 18px; padding-bottom: 0.3em; white-space: normal; background-color: rgb(255, 255, 255);\">合成事件</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件处理程序通过&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">合成事件</code>（<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">SyntheticEvent</code>）的实例传递，<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">SyntheticEvent</code>&nbsp;是浏览器原生事件跨浏览器的封装。<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">SyntheticEvent</code>&nbsp;和浏览器原生事件一样有&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">stopPropagation()</code>、<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">preventDefault()</code>&nbsp;接口，而且这些接口夸浏览器兼容。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">如果出于某些原因想使用浏览器原生事件，可以使用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">nativeEvent</code>&nbsp;属性获取。每个和成事件（<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">SyntheticEvent</code>）对象都有以下属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">boolean&nbsp;bubbles\nboolean&nbsp;cancelable\nDOMEventTarget&nbsp;currentTarget\nboolean&nbsp;defaultPrevented\nNumber&nbsp;eventPhase\nboolean&nbsp;isTrusted\nDOMEvent&nbsp;nativeEvent\nvoid&nbsp;preventDefault()\nvoid&nbsp;stopPropagation()\nDOMEventTarget&nbsp;target\nDate&nbsp;timeStamp\nString&nbsp;type</pre><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 0px 0px 20px; font-size: 14px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; line-height: 26px;\">注意：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; line-height: 26px;\">React v0.12 中，事件处理程序返回&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">false</code>&nbsp;不再停止事件传播，取而代之，应该根据需要手动触发&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">e.stopPropagation()</code>&nbsp;或&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">e.preventDefault()</code>。</p></blockquote><h2 id=\"876f5182937447b3fd10297745aca30c\" style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.225; color: rgb(51, 51, 51); margin: 5px 0px; font-size: 18px; padding-bottom: 0.3em; white-space: normal; background-color: rgb(255, 255, 255);\">支持的事件</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">React 将事件统一化，使事件在不同浏览器上有一致的属性。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">下面的事件处理程序在事件冒泡阶段被触发。如果要注册事件捕获处理程序，应该使用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">Capture</code>&nbsp;事件，例如使用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">onClickCapture</code>&nbsp;处理点击事件的捕获阶段，而不是&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">onClick</code>。</p><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">剪贴板事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onCopy&nbsp;onCut&nbsp;onPaste</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">DOMDataTransfer&nbsp;clipboardData</pre><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">键盘事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onKeyDown&nbsp;onKeyPress&nbsp;onKeyUp</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">boolean&nbsp;altKey\nNumber&nbsp;charCode\nboolean&nbsp;ctrlKey\nfunction&nbsp;getModifierState(key)\nString&nbsp;key\nNumber&nbsp;keyCode\nString&nbsp;locale\nNumber&nbsp;location\nboolean&nbsp;metaKey\nboolean&nbsp;repeat\nboolean&nbsp;shiftKey\nNumber&nbsp;which</pre><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">焦点事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onFocus&nbsp;onBlur</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">DOMEventTarget&nbsp;relatedTarget</pre><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">表单事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onChange&nbsp;onInput&nbsp;onSubmit</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">关于&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">onChange</code>&nbsp;事件的更多信息，参见 表单组件 。</p><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">鼠标事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onClick&nbsp;onContextMenu&nbsp;onDoubleClick&nbsp;onDrag&nbsp;onDragEnd&nbsp;onDragEnter&nbsp;onDragExit\nonDragLeave&nbsp;onDragOver&nbsp;onDragStart&nbsp;onDrop&nbsp;onMouseDown&nbsp;onMouseEnter&nbsp;onMouseLeave\nonMouseMove&nbsp;onMouseOut&nbsp;onMouseOver&nbsp;onMouseUp</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">boolean&nbsp;altKey\nNumber&nbsp;button\nNumber&nbsp;buttons\nNumber&nbsp;clientX\nNumber&nbsp;clientY\nboolean&nbsp;ctrlKey\nfunction&nbsp;getModifierState(key)\nboolean&nbsp;metaKey\nNumber&nbsp;pageX\nNumber&nbsp;pageY\nDOMEventTarget&nbsp;relatedTarget\nNumber&nbsp;screenX\nNumber&nbsp;screenY\nboolean&nbsp;shiftKey</pre><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">触控事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onTouchCancel&nbsp;onTouchEnd&nbsp;onTouchMove&nbsp;onTouchStart</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">boolean&nbsp;altKey\nDOMTouchList&nbsp;changedTouches\nboolean&nbsp;ctrlKey\nfunction&nbsp;getModifierState(key)\nboolean&nbsp;metaKey\nboolean&nbsp;shiftKey\nDOMTouchList&nbsp;targetTouches\nDOMTouchList&nbsp;touches</pre><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">用户界面事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onScroll</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">Number&nbsp;detail\nDOMAbstractView&nbsp;view</pre><h3 style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 30px; margin-bottom: 10px; font-size: 18px; white-space: normal; background-color: rgb(255, 255, 255);\">滚轮事件</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">事件名称：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">onWheel</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">属性：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">Number&nbsp;deltaMode\nNumber&nbsp;deltaX\nNumber&nbsp;deltaY\nNumber&nbsp;deltaZ</pre><p><br/></p>','2017-01-09 01:09:34','2017-01-09 01:17:51'),(28,'react表单',1,0,'表单不同于其他 HTML 元素，因为它要响应用户的交互，显示不同的状态，所以在 React 里面会有点特殊。','<h2 id=\"2d43b0d19e6cd87830cfb638898f31e8\" style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.225; color: rgb(51, 51, 51); margin: 5px 0px; font-size: 18px; padding-bottom: 0.3em; white-space: normal; background-color: rgb(255, 255, 255);\">状态属性</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">表单元素有这么几种属于状态的属性：</p><ul style=\"box-sizing: border-box; margin-bottom: 10px; font-size: 12px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">value</code>，对应&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;input&gt;</code>&nbsp;和&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;textarea&gt;</code>&nbsp;所有</p></li><li><p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">checked</code>，对应类型为&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">checkbox</code>&nbsp;和&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">radio</code>&nbsp;的&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;input&gt;</code>&nbsp;所有</p></li><li><p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">selected</code>，对应&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;option&gt;</code>&nbsp;所有</p></li></ul><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"box-sizing: border-box;\">在 HTML 中&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;textarea&gt;</code>&nbsp;的值可以由子节点（文本）赋值，但是在 React 中，要用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">value</code>&nbsp;来设置。</em></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">表单元素包含以上任意一种状态属性都支持&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">onChange</code>&nbsp;事件监听状态值的更改。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">针对这些状态属性不同的处理策略，表单元素在 React 里面有两种表现形式。</p><h2 id=\"14af0633758f8b1e72f7c159151e3b2a\" style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.225; color: rgb(51, 51, 51); margin: 5px 0px; font-size: 18px; padding-bottom: 0.3em; white-space: normal; background-color: rgb(255, 255, 255);\">受控组件</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">对于设置了上面提到的对应“状态属性“值的表单元素就是受控表单组件，比如：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value=&quot;hello&quot;/&gt;;\n}</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">一个受控的表单组件，它所有状态属性更改涉及 UI 的变更都由 React 来控制（状态属性绑定 UI）。比如上面代码里的&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;input&gt;</code>&nbsp;输入框，用户输入内容，用户输入的内容不会显示（输入框总是显示状态属性&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">value</code>&nbsp;的值&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">hello</code>），这有点颠覆我们的认知了，所以说这是<span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51); line-height: 26px;\">受控</span>组件，不是原来默认的表单元素了。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">如果你希望输入的内容反馈到输入框，就要用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">onChange</code>&nbsp;事件改变状态属性&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">value</code>&nbsp;的值：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">getInitialState:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{value:&nbsp;&#39;hello&#39;};\n},\nhandleChange:&nbsp;function(event)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.setState({value:&nbsp;event.target.value});\n},\nrender:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;this.state.value;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value={value}&nbsp;onChange={this.handleChange}&nbsp;/&gt;;\n}</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">使用这种模式非常容易实现类似对用户输入的验证，或者对用户交互做额外的处理，比如截断最多输入140个字符：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">handleChange:&nbsp;function(event)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.setState({value:&nbsp;event.target.value.substr(0,&nbsp;140)});\n}</pre><h2 id=\"313e29c42a36605eb3ba8bc25c1f26ec\" style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.225; color: rgb(51, 51, 51); margin: 5px 0px; font-size: 18px; padding-bottom: 0.3em; white-space: normal; background-color: rgb(255, 255, 255);\">非受控组件</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">和受控组件相对，如果表单元素没有设置自己的“状态属性”，或者属性值设置为&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">null</code>，这时候就是非受控组件。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">它的表现就符合普通的表单元素，正常响应用户的操作。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">同样，你也可以绑定&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">onChange</code>&nbsp;事件处理交互。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">如果你想要给“状态属性”设置默认值，就要用 React 提供的特殊属性&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">defaultValue</code>，对于&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">checked</code>&nbsp;会有&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">defaultChecked</code>，<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;option&gt;</code>&nbsp;也是使用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">defaultValue</code>。</p><h2 id=\"f65080f05586507d781d7840d1124a02\" style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.225; color: rgb(51, 51, 51); margin: 5px 0px; font-size: 18px; padding-bottom: 0.3em; white-space: normal; background-color: rgb(255, 255, 255);\">为什么要有受控组件？</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">引入受控组件不是说它有什么好处，而是因为 React 的 UI 渲染机制，对于表单元素不得不引入这一特殊的处理方式。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">在浏览器 DOM 里面是有区分&nbsp;<em style=\"box-sizing: border-box;\">attribute</em>&nbsp;和&nbsp;<em style=\"box-sizing: border-box;\">property</em>&nbsp;的。<em style=\"box-sizing: border-box;\">attribute</em>&nbsp;是在 HTML 里指定的属性，而每个 HTML 元素在 JS 对应是一个 DOM 节点对象，这个对象拥有的属性就是&nbsp;<em style=\"box-sizing: border-box;\">property</em>（可以在 console 里展开一个 DOM 节点对象看一下，HTML&nbsp;<em style=\"box-sizing: border-box;\">attributes</em>&nbsp;只是对应其中的一部分属性），<em style=\"box-sizing: border-box;\">attribute</em>&nbsp;对应的&nbsp;<em style=\"box-sizing: border-box;\">property</em>&nbsp;会从&nbsp;<em style=\"box-sizing: border-box;\">attribute</em>&nbsp;拿到初始值，有些会有相同的名称，但是有些名称会不一样，比如&nbsp;<em style=\"box-sizing: border-box;\">attribute</em>&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">class</code>&nbsp;对应的&nbsp;<em style=\"box-sizing: border-box;\">property</em>&nbsp;就是&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">className</code>。（详细解释：<a rel=\"nofollow\" href=\"http://stackoverflow.com/questions/5874652/prop-vs-attr\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(45, 133, 202); text-decoration: none;\" a=\"\">.prop() vs .attr()</a>）</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">回到 React 里的&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;input&gt;</code>&nbsp;输入框，当用户输入内容的时候，输入框的&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">value</code>&nbsp;<em style=\"box-sizing: border-box;\">property</em>&nbsp;会改变，但是&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">value</code><em style=\"box-sizing: border-box;\">attribute</em>&nbsp;依然会是 HTML 上指定的值（<em style=\"box-sizing: border-box;\">attribute</em>&nbsp;要用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">setAttribute</code>&nbsp;去更改）。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">React 组件必须呈现这个组件的状态视图，这个视图 HTML 是由&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">render</code>&nbsp;生成，所以对于</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value=&quot;hello&quot;/&gt;;\n}</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">在任意时刻，这个视图总是返回一个显示&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">hello</code>&nbsp;的输入框。</p><h2 id=\"221f08282418e2996498697df914ce4e\" style=\"box-sizing: border-box; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; font-weight: 500; line-height: 1.225; color: rgb(51, 51, 51); margin: 5px 0px; font-size: 18px; padding-bottom: 0.3em; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 16.2px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;select&gt;</code></h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">在 HTML 中&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;select&gt;</code>&nbsp;标签指定选中项都是通过对应&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;option&gt;</code>&nbsp;的&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">selected</code>&nbsp;属性来做的，但是在 React 修改成统一使用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">value</code>。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box; font-weight: 700; color: rgb(51, 51, 51); line-height: 26px;\">所以没有一个&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">selected</code>&nbsp;的状态属性。</span></p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\">&lt;select&nbsp;value=&quot;B&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;option&nbsp;value=&quot;A&quot;&gt;Apple&lt;/option&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;option&nbsp;value=&quot;B&quot;&gt;Banana&lt;/option&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;option&nbsp;value=&quot;C&quot;&gt;Cranberry&lt;/option&gt;\n&lt;/select&gt;</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; font-size: 14px; color: rgb(102, 102, 102); line-height: 26px; font-family: Verdana, &quot;Lantinghei SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Helvetica, arial, 宋体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">你可以通过传递一个数组指定多个选中项：<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12.6px; padding: 2px 4px; color: rgb(45, 133, 202); background-color: rgb(249, 242, 244); border-radius: 4px;\">&lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;</code></p>','2017-01-09 01:22:57','2017-01-09 01:22:57');
/*!40000 ALTER TABLE `articles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `article_id` int(10) unsigned NOT NULL,
  `comment_id` int(10) unsigned NOT NULL DEFAULT '0',
  `name` char(15) COLLATE utf8_unicode_ci DEFAULT '',
  `email` varchar(40) COLLATE utf8_unicode_ci DEFAULT '',
  `content` varchar(350) COLLATE utf8_unicode_ci NOT NULL,
  `admin` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `comments_article` (`article_id`),
  CONSTRAINT `comments_article` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` VALUES (17,19,0,'','','外键约束对于一对多的情况之下是很好用的，特别在删除或更新父表的时候！！',1,'2016-05-20 03:52:50','2016-05-20 03:52:50'),(18,17,0,'','','Sublime Textv2.2221 简体中文优化注册版下载地址：http://www.ttrar.com/html/Sublime-Text-V2-YouHua.html',1,'2016-05-20 05:28:15','2016-05-20 05:28:15'),(22,25,0,'xiaoliiiiii','1140926800@qq.com','总算弄明白了',0,'2016-06-08 23:21:07','2016-06-08 23:21:07'),(23,21,0,'','','Mysql中InnoDB支持事务处理、储存过程、行级锁；而Myisam不支持事务处理、储存过程，只支持表级锁。但是Myisam在CURL操作比较快',1,'2016-07-12 13:14:57','2016-07-12 13:14:57'),(24,21,0,'','','是是是',1,'2016-07-12 13:15:40','2016-07-12 13:15:40'),(27,25,22,'','','回复 xiaoliiiiii: ',1,'2017-01-06 08:41:41','2017-01-06 08:41:41');
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES ('2014_10_12_000000_create_users_table',1),('2014_10_12_100000_create_password_resets_table',1),('2016_05_17_120006_create_articles_table',2),('2016_05_17_121656_add_type_to_articles_table',3),('2016_05_17_125945_create_articles_table',4),('2016_05_17_132200_create_articles_table',5),('2016_05_18_133145_create_comments_table',6),('2016_05_19_022652_create_comments_table',7);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `password_resets`
--

LOCK TABLES `password_resets` WRITE;
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
INSERT INTO `password_resets` VALUES ('1140926800@qq.com','1069f238db4011ee871f57434bc1955b62a4697f68e1da4c54ae6d82f051ab37','2016-08-29 14:53:50');
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'xiaoli','1140926800@qq.com','$2y$10$DySBv27NuhccFC9wuajrl.OzoUsjq1h2fgFeOPnChnLXNQII0L9ay','eA3mYb0KZiOlUDBlCCuDlVvTXkC4OlWbYZvjE1RgChZG1dg03zRPs9FOmxSo','2016-05-17 02:44:52','2017-01-07 12:24:10');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-01-09 17:58:17
